{"version":3,"sources":["Todos.js","AddTODO.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","deleteTodo","todolist","length","map","todo","react_default","a","createElement","key","id","className","onClick","content","AddTODO","state","changeContent","e","preventDefault","_this","props","addTodo","setState","updateContent","target","value","onSubmit","this","placeholder","onChange","Component","App","list","console","log","filter","localStorage","setItem","JSON","stringify","c","push","clearAll","clear","undefined","parse","src_Todos","src_AddTODO","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAuBeA,EArBD,SAAAC,GAAyB,IAAvBC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,WAEbC,EAAWF,EAAMG,OACnBH,EAAMI,IAAI,SAAAC,GACN,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAKK,GAAIC,UAAU,wBACzBL,EAAAC,EAAAC,cAAA,QAAMI,QAAS,WAAOX,EAAWI,EAAKK,MAAOL,EAAKQ,YAK9DP,EAAAC,EAAAC,cAAA,KAAGG,UAAU,UAAb,0CAGJ,OACIL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,oBACVT,ICgBEY,6MA/BXC,MAAQ,CACJF,QAAS,MAGbG,cAAgB,SAACC,GACbA,EAAEC,iBACFC,EAAKC,MAAMC,QAAQF,EAAKJ,MAAMF,SAE9BM,EAAKG,SAAS,CACVT,QAFU,QAMlBU,cAAgB,SAACN,GACb,IAAIJ,EAAUI,EAAEO,OAAOC,MACvBN,EAAKG,SAAS,CACVT,qFAKJ,OACIP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMkB,SAAUC,KAAKX,eACjBV,EAAAC,EAAAC,cAAA,SAAOiB,MAAOE,KAAKZ,MAAMF,QAASF,UAAU,UAAUiB,YAAY,aAAaC,SAAUF,KAAKJ,yBAzB5FO,aCmEPC,oNA9DbhB,MAAQ,CAENiB,KAAM,MAgBR/B,WAAa,SAACS,GACZuB,QAAQC,IAAIxB,GACZ,IAAMsB,EAAOb,EAAKJ,MAAMiB,KAAKG,OAAO,SAAA9B,GAClC,OAAOA,EAAKK,KAAOA,IAErB0B,aAAaC,QAAQ,OAAQC,KAAKC,UAAUP,IAC5CC,QAAQC,IAAIE,cACZjB,EAAKG,SAAS,CACZU,YAIJX,QAAU,SAACmB,GACP,IAAI9B,EAAKS,EAAKJ,MAAMiB,KAAK7B,OAAS,EAE9BU,EAAU2B,EACdP,QAAQC,IAAI,OAASxB,EAAK,cAAgBG,GAC1C,IAAMmB,EAAOb,EAAKJ,MAAMiB,KACxBA,EAAKS,KAAK,CAAC/B,GAAIA,EAAIG,QAASA,IAC5BuB,aAAaC,QAAQ,OAAQC,KAAKC,UAAUP,IAC5CC,QAAQC,IAAIE,cACZjB,EAAKG,SAAS,CAACU,YAGnBU,SAAW,WACTN,aAAaO,QAEbxB,EAAKG,SAAS,CACZU,KAFS,yFAnCX,IAAIA,EAAOI,aAAaJ,KACxBC,QAAQC,IAAIF,QACCY,IAATZ,GACFL,KAAKL,SAAS,CACZU,KAAMM,KAAKO,MAAMb,sCAsCrB,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,sBACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,oBAAd,UACAL,EAAAC,EAAAC,cAACsC,EAAD,CAAO9C,MAAO2B,KAAKZ,MAAMiB,KAAM/B,WAAY0B,KAAK1B,aAChDK,EAAAC,EAAAC,cAACuC,EAAD,CAAS1B,QAASM,KAAKN,UACvBf,EAAAC,EAAAC,cAAA,UAAQG,UAAU,qCAAqCC,QAASe,KAAKe,UAArE,qBA1DUZ,cCOEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2467b49c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Todos = ({todos, deleteTodo}) => {\r\n\r\n    const todolist = todos.length ? (\r\n        todos.map(todo => {\r\n            return (\r\n                <div key={todo.id} className=\"todo collection-item\">\r\n                    <span onClick={() => {deleteTodo(todo.id)}}>{todo.content}</span>\r\n                </div>\r\n            )\r\n        })\r\n    ) : (\r\n        <p className=\"center\">You don't have to do anything today :)</p>\r\n    );\r\n\r\n    return (\r\n        <div className=\"todos collection\">\r\n            {todolist}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todos;","import React, { Component } from 'react';\r\n\r\nclass AddTODO extends Component {\r\n    state = {\r\n        content: ''\r\n    };\r\n\r\n    changeContent = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.content);\r\n        let content = '';\r\n        this.setState({\r\n            content\r\n        })\r\n    };\r\n\r\n    updateContent = (e) => {\r\n        let content = e.target.value;\r\n        this.setState({\r\n            content\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.changeContent}>\r\n                    <input value={this.state.content} className=\"oh-yeah\" placeholder=\"Add a todo\" onChange={this.updateContent}/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTODO","import React, { Component } from 'react';\nimport Todos from './Todos.js';\nimport AddTODO from './AddTODO.js';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n\n    list: [\n\n    ]\n\n  };\n\n  componentDidMount(){\n    let list = localStorage.list;\n    console.log(list);\n    if (list !== undefined) {\n      this.setState({\n        list: JSON.parse(list)\n      })\n    }\n  };\n\n  deleteTodo = (id) => {\n    console.log(id);\n    const list = this.state.list.filter(todo => {\n      return todo.id !== id;\n    });\n    localStorage.setItem('list', JSON.stringify(list));\n    console.log(localStorage);\n    this.setState({\n      list\n    })\n  };\n\n  addTodo = (c) => {\n      let id = this.state.list.length + 1;\n      //let content = prompt(\"add a todo:\", \"todo\");\n      let content = c;\n      console.log(\"id: \" + id + \", content: \" + content);\n      const list = this.state.list;\n      list.push({id: id, content: content});\n      localStorage.setItem('list', JSON.stringify(list));\n      console.log(localStorage);\n      this.setState({list});\n  };\n\n  clearAll = () => {\n    localStorage.clear();\n    let list = [];\n    this.setState({\n      list\n    })\n  };\n\n  render() {\n    return (\n      <div className=\"todo-app container\">\n        <h2 className=\"center blue-text\">Todo's</h2>\n        <Todos todos={this.state.list} deleteTodo={this.deleteTodo}/>\n        <AddTODO addTodo={this.addTodo}/>\n        <button className=\"waves-effect waves-light btn-small\" onClick={this.clearAll}>Clear All</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}