{"version":3,"sources":["Todos.js","HistoryTodos.js","AddTODO.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","deleteTodo","onDragStart","onDragEnd","onDragOver","todolist","length","map","todo","idx","react_default","a","createElement","key","id","className","draggable","e","onClick","content","role","aria-labelledby","HistoryTodos","historyTodos","historyRestore","historyTodosList","historyTodo","AddTODO","state","changeContent","preventDefault","_this","props","addTodo","setState","updateContent","target","value","onSubmit","this","placeholder","onChange","Component","App","maxId","list","historyList","console","log","filter","concat","localStorage","setItem","JSON","stringify","c","push","clearAll","clearAllHistory","index","draggedItem","dataTransfer","effectAllowed","setData","parentNode","setDragImage","draggedOverItem","item","splice","draggedIdx","itemRestored","Object","toConsumableArray","templist","temphistoryList","undefined","parse","src_Todos","src_AddTODO","type","src_HistoryTodos","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4a73513.chunk.js","sourcesContent":["import React from 'react';\n\nconst Todos = ({todos, deleteTodo, onDragStart, onDragEnd, onDragOver}) => {\n\n    const todolist = todos.length ? (\n        todos.map((todo, idx) => {\n            return (\n                <div key={todo.id} onDragOver={() => {onDragOver(idx)}} className=\"collection-item\">\n                    <span draggable\n                          onDragStart={e => {onDragStart(e, idx)}}\n                          onDragEnd={() => {onDragEnd()}} className=\"todo-wrapper\"><span className=\"todo\" onClick={() => {deleteTodo(todo.id)}}>{todo.content}</span></span>\n                </div>\n            )\n        })\n    ) : (\n        <p className=\"center noTodo\">You don't have to do anything today <span role=\"img\" aria-labelledby=\"\" className=\"comma\">ðŸ˜Ž</span></p>\n    );\n\n    return (\n        <div className=\"todos\">\n            {todolist}\n        </div>\n    );\n};\n\nexport default Todos;","import React from 'react';\r\n\r\nconst HistoryTodos = ({historyTodos, historyRestore}) => {\r\n\r\n    const historyTodosList = historyTodos.length ? (\r\n\r\n        historyTodos.map(historyTodo => {\r\n            return (\r\n                <div key={historyTodo.id} className=\"historyTodo collection-item\">\r\n                    <span onClick={() => {historyRestore(historyTodo.id)}}>{historyTodo.content}</span>\r\n                </div>\r\n            )\r\n        })\r\n\r\n    ) : (\r\n        <p className=\"center history\">The history is empty <span className=\"comma\">!!</span></p>\r\n    );\r\n\r\n    return (\r\n        <div className=\"todos\">\r\n            {historyTodosList}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HistoryTodos;","import React, { Component } from 'react';\n\nclass AddTODO extends Component {\n    state = {\n        content: ''\n    };\n\n    changeContent = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state.content);\n        let content = '';\n        this.setState({\n            content\n        })\n    };\n\n    updateContent = (e) => {\n        let content = e.target.value;\n        this.setState({\n            content\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"todos\">\n                <form onSubmit={this.changeContent}>\n                    <input value={this.state.content} className=\"addTodo\" placeholder=\"Add a todo\" onChange={this.updateContent}/>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddTODO","import React, { Component } from 'react';\nimport Todos from './Todos.js';\nimport HistoryTodos from './HistoryTodos.js';\nimport AddTODO from './AddTODO.js';\nimport './App.css';\n\nclass App extends Component {\n\n  maxId = 0;\n\n  state = {\n\n    list: [],\n    historyList: []\n\n  };\n\n  componentDidMount(){\n    this.maxId = 0;\n    let templist = localStorage.list;\n    let temphistoryList = localStorage.historyList;\n    console.log(templist);\n    if (templist !== undefined) {\n      const list = JSON.parse(templist);\n      this.maxId += list.length;\n      this.setState({\n        list\n      })\n    }\n\n    if (temphistoryList !== undefined) {\n        const historyList = JSON.parse(temphistoryList);\n        this.maxId += historyList.length;\n        this.setState({\n            historyList\n        })\n    }\n    console.log(\"max id \" + this.maxId);\n  };\n\n  deleteTodo = (id) => {\n    console.log(id);\n    const list = this.state.list.filter(todo => {\n      return todo.id !== id;\n    });\n    const historyList = this.state.list.filter(todo => {\n        return todo.id === id;\n    }).concat(this.state.historyList);\n    //historyList.concat(this.state.historyList);\n    localStorage.setItem('list', JSON.stringify(list));\n    localStorage.setItem('historyList', JSON.stringify(historyList));\n    console.log(localStorage);\n    this.setState({\n      list,\n      historyList\n    })\n  };\n\n  addTodo = (c) => {\n      let id = this.maxId + 1;\n      this.maxId++;\n      //let content = prompt(\"add a todo:\", \"todo\");\n      let content = c;\n      console.log(\"id: \" + id + \", content: \" + content);\n      const list = this.state.list;\n      list.push({id: id, content: content});\n      localStorage.setItem('list', JSON.stringify(list));\n      console.log(localStorage);\n      this.setState({list});\n  };\n\n  clearAll = () => {\n    const list = [];\n    localStorage.setItem('list', JSON.stringify(list));\n    const historyList = this.state.list.concat(this.state.historyList);\n    localStorage.setItem('historyList', JSON.stringify(historyList));\n    this.setState({\n      list,\n      historyList\n    })\n  };\n\n  clearAllHistory = () => {\n    let historyList = [];\n    localStorage.setItem('historyList', JSON.stringify(historyList));\n    this.setState({\n        historyList\n    })\n  };\n\n    onDragStart = (e, index) => {\n        this.draggedItem = this.state.list[index];\n        e.dataTransfer.effectAllowed = \"move\";\n        e.dataTransfer.setData(\"text/html\", e.target.parentNode);\n        e.dataTransfer.setDragImage(e.target.parentNode, 20, 20);\n    };\n\n    onDragOver = index => {\n        const draggedOverItem = this.state.list[index];\n\n        // if the item is dragged over itself, ignore\n        if (this.draggedItem === draggedOverItem) {\n            return;\n        }\n\n        // filter out the currently dragged item\n        let list = this.state.list.filter(item => item !== this.draggedItem);\n\n        // add the dragged item after the dragged over item\n        list.splice(index, 0, this.draggedItem);\n\n        this.setState({ list });\n    };\n\n    onDragEnd = () => {\n        this.draggedIdx = null;\n    };\n\n    historyRestore = (id) => {\n        const itemRestored = this.state.historyList.filter(todo => {\n            return todo.id === id;\n        })[0];\n\n        const temphistoryList = [...this.state.historyList];\n        const historyList = temphistoryList.filter(todo => {\n            return todo.id !== id;\n        });\n\n        const list = [...this.state.list, itemRestored];\n        localStorage.setItem('list', JSON.stringify(list));\n        localStorage.setItem('historyList', JSON.stringify(historyList));\n        this.setState({\n            list,\n            historyList\n        })\n    };\n\n  render() {\n    return (\n      <div className=\"todo-app container\">\n        <h2 className=\"center blue-text header\">Todo<span className=\"comma\">'</span>s</h2>\n        <Todos todos={this.state.list} deleteTodo={this.deleteTodo} onDragStart={this.onDragStart} onDragEnd={this.onDragEnd} onDragOver={this.onDragOver}/>\n        <AddTODO addTodo={this.addTodo}/>\n        <input type=\"button\" className=\"button\" onClick={this.clearAll} value=\"Done All\" />\n        <HistoryTodos historyTodos={this.state.historyList} historyRestore={this.historyRestore}/>\n        <input type=\"button\" className=\"button\" onClick={this.clearAllHistory} value=\"Clear History\"/>\n        <p className=\"by-whom\">By Ziad Hisham <span className=\"github\"><a href=\"https://github.com/ziadhishamali\">Github</a></span></p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}