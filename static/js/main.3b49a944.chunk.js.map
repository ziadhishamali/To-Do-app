{"version":3,"sources":["Todos.js","HistoryTodos.js","AddTODO.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","deleteTodo","todolist","length","map","todo","react_default","a","createElement","key","id","className","onClick","content","HistoryTodos","historyTodos","historyTodosList","historyTodo","AddTODO","state","changeContent","e","preventDefault","_this","props","addTodo","setState","updateContent","target","value","onSubmit","this","placeholder","onChange","Component","App","maxId","list","historyList","console","log","filter","concat","localStorage","setItem","JSON","stringify","c","push","clearAll","clearAllHistory","undefined","parse","src_Todos","src_AddTODO","src_HistoryTodos","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b49a944.chunk.js","sourcesContent":["import React from 'react';\n\nconst Todos = ({todos, deleteTodo}) => {\n\n    const todolist = todos.length ? (\n        todos.map(todo => {\n            return (\n                <div key={todo.id} className=\"todo collection-item\">\n                    <span onClick={() => {deleteTodo(todo.id)}}>{todo.content}</span>\n                </div>\n            )\n        })\n    ) : (\n        <p className=\"center\">You don't have to do anything today :)</p>\n    );\n\n    return (\n        <div className=\"todos collection\">\n            {todolist}\n        </div>\n    );\n}\n\nexport default Todos;","import React from 'react';\r\n\r\nconst HistoryTodos = ({historyTodos}) => {\r\n\r\n    const historyTodosList = historyTodos.length ? (\r\n\r\n        historyTodos.map(historyTodo => {\r\n            return (\r\n                <div key={historyTodo.id} className=\"historyTodo collection-item\">\r\n                    <span >{historyTodo.content}</span>\r\n                </div>\r\n            )\r\n        })\r\n\r\n    ) : (\r\n        <p className=\"center history\">The history is empty !!</p>\r\n    );\r\n\r\n    return (\r\n        <div className=\"collection\">\r\n            {historyTodosList}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HistoryTodos;","import React, { Component } from 'react';\n\nclass AddTODO extends Component {\n    state = {\n        content: ''\n    };\n\n    changeContent = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state.content);\n        let content = '';\n        this.setState({\n            content\n        })\n    };\n\n    updateContent = (e) => {\n        let content = e.target.value;\n        this.setState({\n            content\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.changeContent}>\n                    <input value={this.state.content} className=\"oh-yeah\" placeholder=\"Add a todo\" onChange={this.updateContent}/>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddTODO","import React, { Component } from 'react';\nimport Todos from './Todos.js';\nimport HistoryTodos from './HistoryTodos.js';\nimport AddTODO from './AddTODO.js';\nimport './App.css';\n\nclass App extends Component {\n\n  maxId = 0;\n\n  state = {\n\n    list: [],\n    historyList: []\n\n  };\n\n  componentDidMount(){\n    let list = localStorage.list;\n    let historyList = localStorage.historyList;\n    console.log(list);\n    if (list !== undefined) {\n      this.setState({\n        list: JSON.parse(list),\n      })\n    }\n\n    if (historyList !== undefined) {\n        this.setState({\n            historyList: JSON.parse(historyList)\n        })\n    }\n  };\n\n  deleteTodo = (id) => {\n    console.log(id);\n    const list = this.state.list.filter(todo => {\n      return todo.id !== id;\n    });\n    const historyList = this.state.list.filter(todo => {\n        return todo.id === id;\n    }).concat(this.state.historyList);\n    //historyList.concat(this.state.historyList);\n    localStorage.setItem('list', JSON.stringify(list));\n    localStorage.setItem('historyList', JSON.stringify(historyList));\n    console.log(localStorage);\n    this.setState({\n      list,\n      historyList\n    })\n  };\n\n  addTodo = (c) => {\n      let id = this.maxId + 1;\n      this.maxId++;\n      //let content = prompt(\"add a todo:\", \"todo\");\n      let content = c;\n      console.log(\"id: \" + id + \", content: \" + content);\n      const list = this.state.list;\n      list.push({id: id, content: content});\n      localStorage.setItem('list', JSON.stringify(list));\n      console.log(localStorage);\n      this.setState({list});\n  };\n\n  clearAll = () => {\n    const list = [];\n    localStorage.setItem('list', JSON.stringify(list));\n    const historyList = this.state.list.concat(this.state.historyList);\n    localStorage.setItem('historyList', JSON.stringify(historyList));\n    this.setState({\n      list,\n      historyList\n    })\n  };\n\n  clearAllHistory = () => {\n    let historyList = [];\n    localStorage.setItem('historyList', JSON.stringify(historyList));\n    this.setState({\n        historyList\n    })\n  };\n\n  render() {\n    return (\n      <div className=\"todo-app container\">\n        <h2 className=\"center blue-text\">Todo's</h2>\n        <Todos todos={this.state.list} deleteTodo={this.deleteTodo}/>\n        <AddTODO addTodo={this.addTodo}/>\n        <button className=\"waves-effect waves-light btn-small\" onClick={this.clearAll}>Done All</button>\n        <br/>\n        <HistoryTodos historyTodos={this.state.historyList}/>\n        <button className=\"waves-effect waves-light btn-small\" onClick={this.clearAllHistory}>Clear History</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}